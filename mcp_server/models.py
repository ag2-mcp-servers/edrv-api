# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:55:46+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint


class Schema1(BaseModel):
    location: Optional[str] = None
    manufacturer: Optional[str] = None
    model: Optional[str] = None
    protocol: Optional[str] = None
    public: Optional[bool] = None


class SortOrder(Enum):
    desc = 'desc'
    asc = 'asc'


class V1ChargestationsPostResponse(BaseModel):
    chargestation: Optional[Dict[str, Any]] = None
    message: Optional[str] = None
    ok: Optional[bool] = None


class V1ChargestationsIdPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1CommandsCancelreservationPostRequest(BaseModel):
    reservation: Optional[str] = None


class V1CommandsCancelreservationPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1CommandsChargingscheduleDeleteRequest(BaseModel):
    id: Optional[str] = None


class V1CommandsChargingscheduleDeleteResponse(BaseModel):
    command: Optional[Dict[str, Any]] = None
    message: Optional[str] = None
    ok: Optional[bool] = None


class ScheduleItem(BaseModel):
    endDate: Optional[str] = None
    limit: Optional[float] = None
    startDate: Optional[str] = None
    unit: Optional[str] = None


class V1CommandsChargingschedulePostRequest(BaseModel):
    connector: Optional[str] = None
    schedule: Optional[List[ScheduleItem]] = None


class V1CommandsChargingschedulePostResponse(BaseModel):
    command: Optional[Dict[str, Any]] = None
    message: Optional[str] = None
    ok: Optional[bool] = None


class V1CommandsRemotestartPostRequest(BaseModel):
    chargestation: Optional[str] = None
    connector: Optional[str] = None
    driver: Optional[str] = None
    token: Optional[str] = None


class V1CommandsRemotestartPostResponse(BaseModel):
    command: Optional[Dict[str, Any]] = None
    message: Optional[str] = None
    ok: Optional[bool] = None


class V1CommandsRemotestopPostRequest(BaseModel):
    chargestation: Optional[str] = None
    driver: Optional[str] = None
    transaction: Optional[str] = None


class V1CommandsReservePostRequest(BaseModel):
    chargestation: Optional[str] = None
    connector: Optional[str] = None
    driver: Optional[str] = None
    endDate: Optional[str] = None
    token: Optional[str] = None


class V1CommandsReservePostResponse(BaseModel):
    command: Optional[Dict[str, Any]] = None
    message: Optional[str] = None
    ok: Optional[bool] = None


class V1CommandsResetPostRequest(BaseModel):
    chargestation: Optional[str] = None
    type: Optional[str] = None


class V1CommandsResetPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1CommandsUnlockconnectorPostRequest(BaseModel):
    chargestation: Optional[str] = None
    connector: Optional[str] = None


class V1CommandsUnlockconnectorPostResponse(BaseModel):
    command: Optional[Dict[str, Any]] = None
    message: Optional[str] = None
    ok: Optional[bool] = None


class Variable(Enum):
    MeterValueSampleInterval = 'MeterValueSampleInterval'
    HeartbeatInterval = 'HeartbeatInterval'
    ConnectionTimeOut = 'ConnectionTimeOut'
    WebSocketPingInterval = 'WebSocketPingInterval'
    TransactionMessageRetryInterval = 'TransactionMessageRetryInterval'
    TransactionMessageAttempts = 'TransactionMessageAttempts'


class V1CommandsIdVariablesPatchRequest(BaseModel):
    value: Optional[str] = None
    variable: Optional[Variable] = None


class V1CommandsIdVariablesPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1ConfigurationsPostRequest(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class V1ConfigurationsPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1ConnectorsPostRequest(BaseModel):
    chargestation: Optional[str] = None
    format: Optional[str] = None
    power: Optional[int] = None
    power_type: Optional[str] = None
    rate: Optional[str] = None
    type: Optional[str] = None


class V1ConnectorsPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1ConnectorsIdPatchRequest(BaseModel):
    chargestation: Optional[str] = None
    format: Optional[str] = None
    power: Optional[int] = None
    power_type: Optional[str] = None
    rate: Optional[str] = None
    type: Optional[str] = None


class V1ConnectorsIdPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1DriversGetResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class Address(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    postalCode: Optional[str] = None
    streetAndNumber: Optional[str] = None


class Phone(BaseModel):
    home: Optional[str] = None
    mobile: Optional[str] = None
    work: Optional[str] = None


class Source(Enum):
    physical = 'physical'
    slack = 'slack'
    telegram = 'telegram'
    sms = 'sms'


class V1DriversPostRequest(BaseModel):
    active: Optional[bool] = True
    address: Optional[Address] = None
    email: Optional[str] = None
    firstname: str
    lastname: str
    phone: Optional[Phone] = None
    source: Source


class V1DriversPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1DriversIdPatchRequest(BaseModel):
    active: Optional[bool] = None
    address: Optional[Address] = None
    email: Optional[str] = None
    firstname: Optional[str] = None
    lastname: Optional[str] = None
    phone: Optional[Phone] = None
    source: Optional[str] = None
    tokens: Optional[List] = None


class V1DriversIdPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class Address2(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    postalCode: Optional[str] = None
    state: Optional[str] = None
    streetAndNumber: Optional[str] = None


class Coordinates(BaseModel):
    latitude: Optional[float] = None
    longitude: Optional[float] = None


class Field0Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class Field1Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class Field2Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class Field3Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class Field4Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class Field5Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class Field6Item(BaseModel):
    endTime: Optional[str] = None
    startTime: Optional[str] = None


class OpeningHours(BaseModel):
    field_0: Optional[List[Field0Item]] = Field(None, alias='0')
    field_1: Optional[List[Field1Item]] = Field(None, alias='1')
    field_2: Optional[List[Field2Item]] = Field(None, alias='2')
    field_3: Optional[List[Field3Item]] = Field(None, alias='3')
    field_4: Optional[List[Field4Item]] = Field(None, alias='4')
    field_5: Optional[List[Field5Item]] = Field(None, alias='5')
    field_6: Optional[List[Field6Item]] = Field(None, alias='6')


class V1LocationIdPatchRequest(BaseModel):
    active: Optional[bool] = True
    address: Optional[Address2] = None
    chargestations: Optional[List] = None
    coordinates: Optional[Coordinates] = None
    openingHours: Optional[OpeningHours] = None
    operatorName: Optional[str] = None
    timezone: Optional[str] = None


class V1LocationIdPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class Address3(BaseModel):
    city: Optional[str] = None
    country: Optional[str] = None
    postalCode: Optional[str] = None
    streetAndNumber: Optional[str] = None


class V1LocationsPostRequest(BaseModel):
    active: Optional[bool] = True
    address: Address3
    chargestations: Optional[List] = None
    coordinates: Coordinates
    operatorName: str


class V1LocationsPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class Channels(BaseModel):
    slack: Optional[Dict[str, Any]] = None
    telegram: Optional[Dict[str, Any]] = None


class Configurations(BaseModel):
    basicAuthEnabled: Optional[bool] = None
    basicAuthPassword: Optional[bool] = None


class Links(BaseModel):
    about: Optional[str] = None
    contact: Optional[str] = None
    privacy: Optional[str] = None
    support: Optional[str] = None


class Chat(BaseModel):
    type: Optional[str] = None
    value: Optional[str] = None


class Support(BaseModel):
    business_hours: Optional[str] = None
    chat: Optional[Chat] = None
    contact_number: Optional[str] = None
    email: Optional[str] = None


class SupportChat(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class Colors(BaseModel):
    primary: Optional[str] = None
    secondary: Optional[str] = None


class Theme(BaseModel):
    colors: Optional[Colors] = None


class V1OrganizationsIdPatchRequest(BaseModel):
    active: Optional[bool] = None
    address: Optional[Address3] = None
    channels: Optional[Channels] = None
    configurations: Optional[Configurations] = None
    links: Optional[Links] = None
    locations: Optional[List] = None
    logo: Optional[str] = None
    name: Optional[str] = None
    otp: Optional[str] = None
    stripe_connected_account_id: Optional[str] = None
    stripe_country: Optional[str] = None
    stripe_currency: Optional[str] = None
    stripe_reserve_amount: Optional[int] = None
    support: Optional[Support] = None
    supportChat: Optional[SupportChat] = None
    theme: Optional[Theme] = None


class V1ReservationsIdPatchRequest(BaseModel):
    connector: Optional[conint(ge=1)] = None
    driver: Optional[str] = None
    endDate: Optional[str] = None
    evse: Optional[conint(ge=1)] = None


class V1ReservationsIdPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None


class V1TokensGetResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class Channel(Enum):
    physical = 'physical'
    slack = 'slack'
    telegram = 'telegram'
    sms = 'sms'


class V1TokensPostRequest(BaseModel):
    active: bool
    channel: Channel
    driver: str
    physicalId: str
    type: Optional[str] = None


class V1TokensPostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class V1TokensIdPatchRequest(BaseModel):
    active: Optional[bool] = True
    channel: Optional[Channel] = None
    driver: Optional[str] = None
    physicalId: Optional[str] = None
    type: Optional[str] = None


class V1TokensIdPatchResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class Status(Enum):
    Started = 'Started'
    Ended = 'Ended'


class V1TransactionsGetResponse(BaseModel):
    hasNext: Optional[bool] = None
    hasPrevious: Optional[bool] = None
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class V1VehiclesGetResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[List] = None


class Action(Enum):
    START = 'START'
    STOP = 'STOP'


class V1VehiclesIdChargePostRequest(BaseModel):
    action: Action


class V1VehiclesIdChargePostResponse(BaseModel):
    message: Optional[str] = None
    ok: Optional[bool] = None
    result: Optional[Dict[str, Any]] = None
